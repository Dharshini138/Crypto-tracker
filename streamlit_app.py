import streamlit as st
import pandas as pd
import numpy as np
import requests
import plotly.graph_objects as go
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
from fpdf import FPDF
import base64
import os
from datetime import datetime

# ---- PAGE CONFIG ----
st.set_page_config(layout="wide", page_title="Crypto Tracker & Forecast")

# ---- BACKGROUND IMAGE ----
def set_bg():
    st.markdown(
        f"""
        <style>
        .stApp {{
            background-image: url("https://www.google.com/imgres?imgurl=https%3A%2F%2Ft4.ftcdn.net%2Fjpg%2F08%2F29%2F92%2F35%2F360_F_829923583_Q9qvQUSqXo0URtHNzwwFqU0H0ByKXz1Y.jpg&tbnid=dStsI9EnQbuIlM&vet=10CAgQxiAoA2oXChMIqLPfx_e4jQMVAAAAAB0AAAAAEAc..i&imgrefurl=https%3A%2F%2Fstock.adobe.com%2Fsearch%3Fk%3Dcrypto%2Bbackground&docid=aPj-Izlga9zFZM&w=905&h=360&itg=1&q=crypto%20tracker%20background%20image&ved=0CAgQxiAoA2oXChMIqLPfx_e4jQMVAAAAAB0AAAAAEAc");
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: fixed;
        }}
        </style>
        """,
        unsafe_allow_html=True
    )
set_bg()

# ---- HEADER ----
st.markdown("<h1 style='text-align: center; color: white;'>Crypto Tracker & Forecasting Dashboard</h1>", unsafe_allow_html=True)

# ---- SIDEBAR ----
st.sidebar.image("https://cryptologos.cc/logos/bitcoin-btc-logo.png", width=100)
coin = st.sidebar.selectbox("Choose Cryptocurrency", ['bitcoin', 'ethereum', 'dogecoin', 'solana', 'cardano'])
days = st.sidebar.slider("Days of History", min_value=30, max_value=365, value=180)

# ---- FETCH DATA ----
@st.cache_data
def get_data(coin, days):
    url = f'https://api.coingecko.com/api/v3/coins/{coin}/market_chart?vs_currency=usd&days={days}'
    response = requests.get(url).json()
    prices = pd.DataFrame(response['prices'], columns=["Timestamp", "Price"])
    prices['Date'] = pd.to_datetime(prices['Timestamp'], unit='ms')
    prices.set_index("Date", inplace=True)
    return prices[["Price"]]

df = get_data(coin, days)

# ---- PRICE CHART ----
st.subheader(f"{coin.capitalize()} Price Chart")
fig = go.Figure()
fig.add_trace(go.Scatter(x=df.index, y=df['Price'], name="Price", line=dict(color='cyan')))
fig.update_layout(height=400, margin=dict(l=20, r=20, t=30, b=20), template="plotly_dark")
st.plotly_chart(fig, use_container_width=True)

# ---- LSTM PREDICTION ----
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df)

def create_dataset(data, time_step=60):
    X, y = [], []
    for i in range(len(data) - time_step - 1):
        X.append(data[i:(i + time_step), 0])
        y.append(data[i + time_step, 0])
    return np.array(X), np.array(y)

X, y = create_dataset(scaled_data)
X = X.reshape(X.shape[0], X.shape[1], 1)

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(60, 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X, y, epochs=5, batch_size=32, verbose=0)

# ---- FORECAST ----
last_60 = scaled_data[-60:].reshape(1, 60, 1)
predicted_price = model.predict(last_60)
predicted_price = scaler.inverse_transform(predicted_price)[0][0]

st.markdown(f"<h3 style='color:white;'>Predicted {coin.capitalize()} Price for Next Day: <span style='color:lightgreen;'>${predicted_price:,.2f}</span></h3>", unsafe_allow_html=True)

# --- Save Plotly Chart as Image ---
chart_file = f"{coin}_chart.png"
fig.write_image(chart_file)

# --- Generate PDF with Chart ---
def generate_pdf_with_chart(coin, predicted_price, chart_file):
    pdf = FPDF()
    pdf.add_page()
    
    # Header
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(200, 10, txt=f"{coin.capitalize()} Forecast Report", ln=True, align='C')

    pdf.set_font("Arial", '', 12)
    pdf.ln(5)
    pdf.cell(200, 10, txt=f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", ln=True)
    pdf.cell(200, 10, txt=f"Predicted Next Day Price: ${predicted_price:,.2f}", ln=True)

    pdf.ln(5)
    pdf.image(chart_file, x=10, y=50, w=190)

    # Footer
    pdf.set_y(-20)
    pdf.set_font("Arial", 'I', 8)
    pdf.cell(0, 10, 'Generated by Crypto Forecast App | OpenAI & Streamlit', 0, 0, 'C')

    filename = f"{coin}_forecast_report.pdf"
    pdf.output(filename)

    with open(filename, "rb") as f:
        base64_pdf = base64.b64encode(f.read()).decode('utf-8')
        href = f'<a href="data:application/octet-stream;base64,{base64_pdf}" download="{filename}">ðŸ“„ Download Full PDF Report</a>'
        st.markdown(href, unsafe_allow_html=True)

generate_pdf_with_chart(coin, predicted_price, chart_file)
os.remove(chart_file)
